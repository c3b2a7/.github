name: "Release Install Script"

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      tag:
        type: string
        description: release tag to upload install script for (prefixed with v)
        required: true
      latest:
        description: whether this is the latest release (treating as non-latest when tag is a pre-release)
        required: false
        default: true
        type: boolean
      r2-bucket:
        type: string
        description: the R2 bucket to upload the install script to
        required: false
        default: 'oss-install'

    secrets:
      # cloudflare R2 credentials
      R2_INSTALL_ACCESS_KEY_ID:
        required: true
      R2_INSTALL_SECRET_ACCESS_KEY:
        required: true
      R2_ENDPOINT:
        required: true

jobs:
  upload:
    name: "Upload"
    runs-on: ubuntu-latest
    steps:

      # checkout the specific tag to upload the install script for (this also validates the tag exists)
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          ref: ${{ inputs.tag }}

      # check if this is a pre-release to determine if we should treat it as "latest"
      # pre-releases should not update the latest install script or version files
      - name: Check if pre-release
        id: prerelease-check
        env:
          TAG: ${{ inputs.tag }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # query GitHub API to check if this release is marked as pre-release
          IS_PRERELEASE=$(curl -SsL "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases/tags/${TAG}" | jq -r '.prerelease // false')
          
          # if it's a pre-release, treat latest as false regardless of input
          if [[ "${IS_PRERELEASE}" == "true" ]]; then
            echo "This is a pre-release (${TAG}), treating as non-latest"
            echo "is_latest=false" >> $GITHUB_OUTPUT
          else
            echo "This is a regular release, using input latest value: ${{ inputs.latest }}"
            echo "is_latest=${{ inputs.latest }}" >> $GITHUB_OUTPUT
          fi

      # create version file with v prefix (only when this is the latest release)
      - name: Create version file
        if: ${{ steps.prerelease-check.outputs.is_latest == 'true' }}
        env:
          TAG: ${{ inputs.tag }}
        run: printf "${TAG}" > version

      # configure AWS CLI to work with Cloudflare R2
      - name: Configure AWS CLI for R2
        run: |
          aws configure set aws_access_key_id ${{ secrets.R2_INSTALL_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.R2_INSTALL_SECRET_ACCESS_KEY }}
          aws configure set region auto

      # always upload install script to versioned path for historical access
      # upload to versioned path: {project}/{tag}/install.sh
      - name: Upload versioned install.sh
        env:
          TAG: ${{ inputs.tag }}
          PROJECT_NAME: ${{ github.event.repository.name }}
          BUCKET: ${{ inputs.r2-bucket }}
          ENDPOINT: ${{ secrets.R2_ENDPOINT }}
        run: |
          
          aws s3 cp install.sh s3://${BUCKET}/${PROJECT_NAME}/${TAG}/install.sh \
            --endpoint-url=${ENDPOINT} \
            --content-type "text/plain"

      # upload install script to "latest" path only when this is the latest release
      # upload to latest path: {project}/install.sh
      # note: we have a cloudflare rewrite rule to transform any requests like "/{project}" or similar to "/{project}/install.sh"
      - name: Upload latest install.sh
        if: ${{ steps.prerelease-check.outputs.is_latest == 'true' }}
        env:
          TAG: ${{ inputs.tag }}
          PROJECT_NAME: ${{ github.event.repository.name }}
          BUCKET: ${{ inputs.r2-bucket }}
          ENDPOINT: ${{ secrets.R2_ENDPOINT }}
        run: |
          aws s3 cp install.sh s3://${BUCKET}/${PROJECT_NAME}/install.sh \
            --endpoint-url=${ENDPOINT} \
            --content-type "text/plain"

      # upload version file to R2 for latest release tracking
      - name: Upload version file
        if: ${{ steps.prerelease-check.outputs.is_latest == 'true' }}
        env:
          TAG: ${{ inputs.tag }}
          PROJECT_NAME: ${{ github.event.repository.name }}
          BUCKET: ${{ inputs.r2-bucket }}
          ENDPOINT: ${{ secrets.R2_ENDPOINT }}
        run: |
          aws s3 cp version s3://${BUCKET}/${PROJECT_NAME}/version \
            --endpoint-url=${ENDPOINT} \
            --content-type "text/plain"